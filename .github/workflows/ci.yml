name: CI

on:
  push:
    branches: [ develop ]
  pull_request:
    branches: [ develop ]

env:
  RPUU_DST: ${{ github.workspace }}/../raw-camera-samples/raw.pixls.us-unique

jobs:
  linux:
    name: ${{ matrix.os }}.${{ matrix.compiler.compiler }}.${{ matrix.flavor }}
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        os: [ linux ]
        compiler:
          - { compiler: GNU,  CC: gcc-10,   CXX: g++-10,     GCOV: gcov-10 }
          - { compiler: LLVM, CC: clang-11, CXX: clang++-11 }
        flavor: [ RelWithDebInfo, Coverage, ClangStaticAnalysis, CodeQLAnalysis ]
        exclude:
          - os: linux
            compiler: { compiler: LLVM, CC: clang-11, CXX: clang++-11 }
            flavor: Coverage
          - os: linux
            compiler: { compiler: GNU,  CC: gcc-10,   CXX: g++-10, GCOV: gcov-10 }
            flavor: ClangStaticAnalysis
          - os: linux
            compiler: { compiler: GNU,  CC: gcc-10,   CXX: g++-10, GCOV: gcov-10 }
            flavor: CodeQLAnalysis
    container: debian:testing-slim
    steps:
      - name: Configure APT
        env:
          DEBIAN_FRONTEND: noninteractive
        run: |
          # Paper over occasional network flakiness of some mirrors.
          echo 'Acquire::Retries "10";' > /etc/apt/apt.conf.d/80retry
          # Do not install recommended packages
          echo 'APT::Install-Recommends "false";' > /etc/apt/apt.conf.d/80recommends
          # Do not install suggested packages
          echo 'APT::Install-Suggests "false";' > /etc/apt/apt.conf.d/80suggests
          # Assume yes
          echo 'APT::Get::Assume-Yes "true";' > /etc/apt/apt.conf.d/80forceyes
          # Fix broken packages
          echo 'APT::Get::Fix-Missing "true";' > /etc/apt/apt.conf.d/80fixmissing
      - name: Install/Update necessary packages
        run: |
          rm -rf /var/lib/apt/lists/*;
          apt-get update;
          apt-get install clang++-11 \
                          clang-tidy-11 \
                          clang-tools-11 \
                          cmake \
                          curl \
                          doxygen \
                          g++-10 \
                          gcc \
                          gcc-10 \
                          git \
                          googletest \
                          graphviz \
                          libc++-11-dev \
                          libjpeg-dev \
                          libomp-11-dev \
                          libpugixml-dev \
                          libxml2-utils \
                          make \
                          ninja-build \
                          python3-sphinx \
                          python3-sphinx-rtd-theme \
                          rsync \
                          unzip \
                          zlib1g-dev;
          apt-get clean;
          dpkg-divert --add --rename --divert /usr/bin/ld.original /usr/bin/ld;
          ln -s /usr/bin/ld.gold /usr/bin/ld
          ln -s /usr/bin/clang-11 /usr/local/bin/clang
          ln -s /usr/bin/clang++-11 /usr/local/bin/clang++
          ln -s /usr/bin/clang-tidy-11 /usr/local/bin/clang-tidy
      - uses: actions/checkout@v2
        name: Fetch/Checkout RawSpeed git repo
        with:
          path: ''
      - if: matrix.flavor == 'ClangStaticAnalysis'
        name: Fetch/Checkout CodeChecker git repo (for static analysis)
        uses: actions/checkout@v2
        with:
          repository: 'Ericsson/codechecker'
          path: 'codechecker'
          fetch-depth: '1'
      - if: matrix.flavor == 'ClangStaticAnalysis'
        name: Move CodeChecker git repo into right place
        run: |
          mv codechecker ..
      - if: matrix.flavor == 'ClangStaticAnalysis'
        name: Install CodeChecker (for static analysis)
        run: |
          rm -rf /var/lib/apt/lists/*;
          apt-get update;
          apt-get install libxml2-dev \
                          libxslt1-dev \
                          python-pip-whl \
                          python3-dev \
                          python3-lxml \
                          python3-portalocker \
                          python3-psutil \
                          python3-venv \
                          python3-virtualenv \
                          python3-wheel \
                          python3-yaml;
          apt-get clean;
          cd ../codechecker
          make venv
          . $PWD/venv/bin/activate
          BUILD_LOGGER_64_BIT_ONLY=YES BUILD_UI_DIST=NO make package
          export PATH="$PWD/build/CodeChecker/bin:$PATH"
      - if: matrix.flavor == 'CodeQLAnalysis'
        name: Initialize CodeQL
        uses: github/codeql-action/init@v1
        with:
          languages: cpp
      - name: Fetch raw.pixls.us masterset digest
        if: matrix.flavor == 'Coverage'
        env:
          RPUU_DST: ${{ env.RPUU_DST }}
        id: fetch-rpuu-digest
        run: |
          mkdir -p ${RPUU_DST}
          rsync -vvrLcW --preallocate --delete --compress --compress-level=1 --stats --progress rsync://raw.pixls.us/data-unique/filelist.sha1 ${RPUU_DST}/;
          echo "::set-output name=rpuu-digest-hash::$(sha512sum ${RPUU_DST}/filelist.sha1 | awk '{print $1}')"
      - name: Cache raw.pixls.us masterset
        if: matrix.flavor == 'Coverage'
        uses: actions/cache@v2
        with:
          path: ${{ env.RPUU_DST }}
          key: raw.pixls.us-masterset-${{ steps.fetch-rpuu-digest.outputs.rpuu-digest-hash }}
      - name: Fetch/update raw.pixls.us masterset
        if: matrix.flavor == 'Coverage'
        env:
          RPUU_DST: ${{ env.RPUU_DST }}
        run: |
          rsync -vvrLcW --preallocate --delete --compress --compress-level=1 --stats --progress rsync://raw.pixls.us/data-unique/ ${RPUU_DST}/;
          cd ${RPUU_DST} && sha1sum -c --strict filelist.sha1;
      - name: Build And Test
        env:
          CC: ${{ matrix.compiler.CC }}
          CXX: ${{ matrix.compiler.CXX }}
          GCOV: ${{ matrix.compiler.GCOV }}
          SRC_DIR: ${{ github.workspace }}
          BUILD_DIR: ${{ github.workspace }}/../rawspeed-build
          INSTALL_PREFIX: ${{ github.workspace }}/../rawspeed-install
          RPUU_DST: ${{ env.RPUU_DST }}
          ECO: -DALLOW_DOWNLOADING_GOOGLETEST=ON
          FLAVOR: ${{ matrix.flavor }}
          TARGET: build
        run: |
          if [ ${FLAVOR} = "Coverage" ]; then
            export ECO="${ECO} -DRAWSPEED_ENABLE_SAMPLE_BASED_TESTING=ON";
          fi;
          if [ ${FLAVOR} = "ClangStaticAnalysis" ]; then
            export ECO="${ECO} -DCMAKE_EXPORT_COMPILE_COMMANDS=ON -DUSE_CLANG_TIDY=ON -DCMAKE_C_FLAGS_RELWITHDEBINFO=-UNDEBUG -DCMAKE_CXX_FLAGS_RELWITHDEBINFO=-UNDEBUG";
          fi;
          cmake -E make_directory "${BUILD_DIR}";
          cmake -E make_directory "${INSTALL_PREFIX}";
          export ECO="${ECO} -DRAWSPEED_REFERENCE_SAMPLE_ARCHIVE=${RPUU_DST}";
          "${SRC_DIR}/.ci/ci-script.sh";
      - if: matrix.flavor == 'ClangStaticAnalysis'
        name: Perform clang static analysis
        env:
          SRC_DIR: ${{ github.workspace }}
          BUILD_DIR: ${{ github.workspace }}/../rawspeed-build
        run: |
          . "$PWD/../codechecker/venv/bin/activate"
          export PATH="$PWD/../codechecker/build/CodeChecker/bin:$PATH"
          CodeChecker check --logfile "${BUILD_DIR}/compile_commands.json" --analyzers clangsa --jobs "$(nproc --all)" --file "${SRC_DIR}/*" --disable deadcode.DeadStores
      - if: matrix.flavor == 'CodeQLAnalysis'
        name: Perform CodeQL analysis
        uses: github/codeql-action/analyze@v1
      - if: matrix.flavor == 'Coverage'
        name: Upload code coverage report
        env:
          OS: linux
          ARCH: x86_64
          CXX: ${{ matrix.compiler.compiler }}
          JOB_NAME: ${{ matrix.os }}.${{ matrix.compiler.compiler }}.${{ matrix.flavor }}
          SRC_DIR: ${{ github.workspace }}
          BUILD_DIR: ${{ github.workspace }}/../rawspeed-build
        run: |
          curl -s https://codecov.io/bash > codecov;
          chmod +x codecov;
          ./codecov -e OS,ARCH,CXX -F unittests -n "${JOB_NAME}.Unittests" -R "${SRC_DIR}" -s "${BUILD_DIR}/gcov-reports-unittest" -X gcov -Z;
          ./codecov -e OS,ARCH,CXX -F integration,rpu_u -n "${JOB_NAME}.Integration" -R "${SRC_DIR}" -s "${BUILD_DIR}/gcov-reports-rsa" -X gcov -Z;
  windows-msys2:
    name: ${{ matrix.os }}.${{ matrix.msys2.msystem }}.${{ matrix.compiler.compiler }}.${{ matrix.flavor }}
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ windows-latest ]
        msys2:
          - { msystem: MINGW64, arch: x86_64 }
          - { msystem: MINGW32, arch: i686   }
        compiler:
          - { compiler: GNU,  CC: gcc,   CXX: g++ }
          - { compiler: LLVM, CC: clang, CXX: clang++ }
        flavor: [ RelWithDebInfo, Coverage ]
        exclude:
          - os: windows-latest
            compiler: { compiler: LLVM, CC: clang, CXX: clang++ }
            flavor: Coverage
            # clang-based coverage builds don't work in general.
          - os: windows-latest
            compiler: { compiler: LLVM, CC: clang, CXX: clang++ }
            # weird miscompiles.
          - os: windows-latest
            msys2: { msystem: MINGW32, arch: i686   }
            compiler: { compiler: GNU,  CC: gcc,   CXX: g++ }
            flavor: Coverage
            # weird miscompiles.
    defaults:
      run:
        shell: msys2 {0}
    steps:
      - uses: actions/checkout@v2
        name: Fetch/Checkout RawSpeed git repo
      - uses: msys2/setup-msys2@v2
        with:
          msystem: ${{ matrix.msys2.msystem }}
          install: pacman-mirrors bash curl git base-devel mingw-w64-${{ matrix.msys2.arch }}-toolchain mingw-w64-${{ matrix.msys2.arch }}-gcc mingw-w64-${{ matrix.msys2.arch }}-clang mingw-w64-${{ matrix.msys2.arch }}-openmp mingw-w64-${{ matrix.msys2.arch }}-cmake mingw-w64-${{ matrix.msys2.arch }}-ninja mingw-w64-${{ matrix.msys2.arch }}-libxml2 mingw-w64-${{ matrix.msys2.arch }}-pugixml mingw-w64-${{ matrix.msys2.arch }}-libjpeg-turbo mingw-w64-${{ matrix.msys2.arch }}-zlib
          update: true
      - name: Build And Test
        env:
          CC: ${{ matrix.compiler.CC }}
          CXX: ${{ matrix.compiler.CXX }}
          SRC_DIR: ${{ github.workspace }}
          BUILD_DIR: ${{ github.workspace }}/../rawspeed-build
          INSTALL_PREFIX: ${{ github.workspace }}/../rawspeed-install
          ECO: -DALLOW_DOWNLOADING_GOOGLETEST=ON
          FLAVOR: ${{ matrix.flavor }}
          TARGET: build
        run: |
          cmake -E make_directory "${BUILD_DIR}";
          cmake -E make_directory "${INSTALL_PREFIX}";
          $(cygpath ${SRC_DIR})/.ci/ci-script.sh;
      - if: matrix.flavor == 'Coverage'
        name: Upload code coverage report
        env:
          OS: windows
          ARCH: ${{ matrix.msys2.arch }}
          CXX: ${{ matrix.compiler.compiler }}
          JOB_NAME: ${{ matrix.os }}.${{ matrix.msys2.msystem }}.${{ matrix.compiler.compiler }}.${{ matrix.flavor }}
          SRC_DIR: ${{ github.workspace }}
          BUILD_DIR: ${{ github.workspace }}/../rawspeed-build
        run: |
          curl -s https://codecov.io/bash > codecov;
          chmod +x codecov;
          ./codecov -e OS,ARCH,CXX -F unittests -n "${JOB_NAME}.Unittests" -R "$(cygpath ${SRC_DIR})" -s "$(cygpath ${BUILD_DIR})/gcov-reports-unittest" -X gcov -Z;
  macOS:
    name: ${{ matrix.os }}.${{ matrix.compiler.compiler }}.${{ matrix.flavor }}
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ macos-latest ]
        compiler:
          - { compiler: XCode,   CC: cc, CXX: c++ }
        flavor: [ RelWithDebInfo, Coverage ]
    steps:
      - uses: actions/checkout@v2
        name: Fetch/Checkout RawSpeed git repo
      - name: Install Base Dependencies
        run: |
          # https://github.com/actions/virtual-environments/issues/2322#issuecomment-749211076
          rm -rf /usr/local/bin/2to3
          brew update > /dev/null || true
          brew tap Homebrew/bundle
          cd .ci
          brew bundle --verbose
      - name: Build And Test
        env:
          CC: ${{ matrix.compiler.CC }}
          CXX: ${{ matrix.compiler.CXX }}
          SRC_DIR: ${{ github.workspace }}
          BUILD_DIR: ${{ github.workspace }}/../rawspeed-build
          INSTALL_PREFIX: ${{ github.workspace }}/../rawspeed-install
          ECO: -DALLOW_DOWNLOADING_GOOGLETEST=ON
          FLAVOR: ${{ matrix.flavor }}
          TARGET: build
        run: |
          cmake -E make_directory "${BUILD_DIR}";
          cmake -E make_directory "${INSTALL_PREFIX}";
          ./.ci/ci-script.sh;
      - if: matrix.flavor == 'Coverage'
        name: Upload code coverage report
        env:
          OS: macOS
          ARCH: x86_64
          CXX: AppleXcode
          JOB_NAME: ${{ matrix.os }}.${{ matrix.compiler.compiler }}.${{ matrix.flavor }}
          SRC_DIR: ${{ github.workspace }}
          BUILD_DIR: ${{ github.workspace }}/../rawspeed-build
        run: |
          curl -s https://codecov.io/bash > codecov;
          chmod +x codecov;
          ./codecov -e OS,ARCH,CXX -F unittests -n "${JOB_NAME}.Unittests" -R "${SRC_DIR}" -s "${BUILD_DIR}/gcov-reports-unittest" -X gcov -Z;
